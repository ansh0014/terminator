---
description: 
globs: 
alwaysApply: true
---
# Terminator Development Standards

## Code Quality (Non-Negotiable)

Always run this:

```bash
cargo fmt    # Must pass - zero tolerance for unformatted code
cargo clippy         # Fix ALL warnings - use #[allow] only with justification  
```

## Architecture
- **Core**: Rust in **[terminator/src/](mdc:terminator/src)** with platform traits in **[platforms/mod.rs](mdc:terminator/src/platforms/mod.rs)**
- **Bindings**: Python (**[bindings/python/](mdc:bindings/python)**) and Node.js (**[bindings/nodejs/](mdc:bindings/nodejs)**) wrap Rust core
- **Examples**: **[examples/](mdc:examples)** serve as integration tests - keep simple, one concept each

## API Design
```rust
// ‚úÖ Good: Async, chainable, type-safe
let monitor = desktop.get_primary_monitor().await?;
let screenshot = desktop.capture_monitor(&monitor).await?;

// ‚úÖ Good: Rich error context
.map_err(|e| AutomationError::PlatformError(format!("Failed to capture {}: {}", id, e)))

// ‚úÖ Good: Full documentation
/// Capture monitor screenshot
/// 
/// # Examples
/// ```rust
/// let desktop = Desktop::new_default()?;
/// let screenshot = desktop.capture_monitor(&monitor).await?;
/// ```
#[instrument(skip(self))]
pub async fn capture_monitor(&self, monitor: &Monitor) -> Result<ScreenshotResult, AutomationError>
```

## Platform Code
```rust
#[cfg(target_os = "windows")]
use windows::Win32::UI::Accessibility::*;

#[cfg(target_os = "macos")]  
use accessibility::*;

#[cfg(target_os = "linux")]
use atspi::*;
```

## Development Loop
```bash
# Fast iteration
cargo check && cargo clippy && cargo test

cargo build --release

# Before PR
cargo fmt && cargo clippy -- -D warnings && cargo test
```

Always use terminator-mcp-agent during the development process to inspect different app trees or interact with them, by calling the tools of the MCP. Do not try to build the MCP, it's aready installed ready to use.

## Performance Targets
- UI scans: <80ms
- Screenshots: <100ms  
- Memory: <10MB baseline
- Use `Arc<dyn Trait>`, `#[instrument]`, profile with `criterion`

## Dependencies
- Use `workspace = true` in **[Cargo.toml](mdc:Cargo.toml)**
- Platform deps: `optional = true` + `#[cfg]`
- Minimize external deps, justify additions

## Testing
- Unit tests (80%): Fast, isolated
- Integration tests (15%): Component interaction
- Examples (5%): Real-world scenarios
- Test error cases, not just happy paths
- Do not fucking run all tests if we're working on a specific part of the code, it will blow up the computer otherwise

## PR Requirements
- Video demo for UI changes (Cap.so/Screen.studio)
- Tests pass on all platforms
- Documentation updated
- Example added for new features
- Breaking changes documented

## Language Bindings
- **Python**: PyO3, snake_case, type stubs, docstrings
- **Node.js**: napi-rs, camelCase, TypeScript defs, JSDoc

## String Formatting (`format!`) Best Practices

Follow these rules to keep your string formatting efficient, readable, and free of Clippy warnings:

- üîπ **Prefer cheap alternatives**
  - Simple conversion of a single value: `value.to_string()` or `String::from(value)` is clearer and avoids the overhead of the formatting machinery.
  - Static strings: use `"literal".to_owned()` or `String::from("literal")` instead of `format!("literal")`.

- üîπ **Capture identifiers directly (Rust ‚â• 1.58)**
  ```rust
  // ‚úÖ Good ‚Äì implicit capture
  format!("{count} files processed in {elapsed:?}");

  // ‚ùå Avoid ‚Äì explicit positional args are noisier
  format!("{} files processed in {:?}", count, elapsed);

  // ‚úÖ Good ‚Äì implicit capture
  panic!("‚ùå Local bindings test failed: {error}");

  // ‚ùå Avoid ‚Äì explicit positional args are noisier
  panic!("‚ùå Local bindings test failed: {}", error);
  ```

- üîπ **Avoid `format!` in tight loops**
  - Re-use a `String` buffer with `write!` / `push_str` when building large strings incrementally.
  - Consider `String::with_capacity(..)` to pre-allocate when the final length is known.

- üîπ **Watch for common Clippy lints**
  | Lint | Remedy |
  |------|--------|
  | `clippy::useless_format` | Replace `format!("{}", x)` with `x.to_string()` |
  | `clippy::format_push_string` | Use `push_str` instead of `s.push(format!(..))` |
  | `clippy::uninlined_format_args` | Enable the `format_args_capture` edition feature or inline the arguments |
  | `clippy::format_collect` | Use `Iterator::collect::<String>()` or a buffer |

- üîπ **No nested `format!` calls**
  ```rust
  // ‚úÖ Good
  let msg = format!("User {user} logged in");

  // ‚ùå Bad ‚Äì allocates twice
  let msg = format!("{}", format!("User {} logged in", user));
  ```

Adhering to these guidelines ensures `cargo clippy -- -D warnings` remains green and keeps runtime allocations to a minimum.

